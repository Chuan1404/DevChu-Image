datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String         @id @map("_id")
  name          String
  email         String         @unique
  password      String
  avatar        String?
  role          EUserRole      @default(ROLE_CUSTOMER)
  status        EModelStatus   @default(ACTIVE)
  accountStatus EAccountStatus @default(UNVERIFIED)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  files             FileUploaded[]
  comments          Comment[]
  receipts          Receipt[]
  tokens            RefreshToken[]
  rights            UserRight[]
  verificationCodes VerificationCode[]

  @@map("users")
}

model FileUploaded {
  id        String       @id @map("_id")
  userId    String?      @map("userId")
  title     String?
  display   String?
  high      String?
  medium    String?
  root      String?
  width     Float?
  height    Float?
  price     Float?
  size      Float?
  fileType  String // Required enum
  status    EModelStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  user     User?       @relation(fields: [userId], references: [id])
  comments Comment[]
  receipts Receipt[]
  rights   UserRight[]

  @@map("fileuploadeds")
}

model Comment {
  id        String       @id @map("_id")
  content   String
  userId    String?      @map("userId")
  fileId    String?      @map("fileId")
  status    EModelStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  user User?         @relation(fields: [userId], references: [id])
  file FileUploaded? @relation(fields: [fileId], references: [id])

  @@map("comments")
}

model Receipt {
  id         String         @id @map("_id")
  method     EPaymentMethod @default(MOMO)
  methodId   String?
  totalPrice Float          @default(0)
  userId     String?        @map("userId")
  fileId     String?        @map("fileId")
  status     EModelStatus   @default(ACTIVE)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  user User?         @relation(fields: [userId], references: [id])
  file FileUploaded? @relation(fields: [fileId], references: [id])

  @@map("receipts")
}

model RefreshToken {
  id         String       @id @map("_id")
  token      String
  userId     String?      @map("userId")
  status     EModelStatus @default(ACTIVE)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  user User? @relation(fields: [userId], references: [id])

  @@map("refreshtokens")
}

model Tag {
  id        String       @id @map("_id")
  name      String
  status    EModelStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("tags")
}

model UserRight {
  id         String       @id @map("_id")
  expireDate DateTime?
  userId     String
  fileId     String
  status     EModelStatus @default(ACTIVE)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  user User         @relation(fields: [userId], references: [id])
  file FileUploaded @relation(fields: [fileId], references: [id])

  @@map("userrights")
}

model VerificationCode {
  id        String       @id @map("_id")
  value     String
  userId    String
  status    EModelStatus @default(ACTIVE)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("verificationcodes")
}

enum EUserRole {
  ROLE_CUSTOMER
  ROLE_EDITOR
  ROLE_ADMIN
}

enum EModelStatus {
  ACTIVE
  INACTIVE
  DELETED
}

enum EAccountStatus {
  UNVERIFIED
  VERIFIED
  BANNED
}

enum EPaymentMethod {
  MOMO
  CASH
}
